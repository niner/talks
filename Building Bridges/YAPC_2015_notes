DBIx::Class: no more context! have to use search_rs if we want a result set
how to pass a scalar ref for literal SQL? -> Captures: \('foo')
Attention: positional params mandatory by default!
Attention: => is Pair constructor. Only does the same when creating a hash, not when creating an array!
Attention: {'!=', 'foo'} is a Block! {'!=' => 'foo'} needed in Perl 6
14:43 <ribasushi> by having a p6 class extend DBIx::Class::ResultSet and then tell the DBIC tests (in p5-land) to use this class as the base for the test schema
14:44 <ribasushi> so you have p5test => methodcall => p6 class => handoff via around()-like => p5 base class => p5 code
14:44 <nine> Oh yes, indeed!
14:45 <ribasushi> and because the entirety of DBIC is designed to do that 
14:45 <ribasushi> you can hook any of the classes and "divert" its methods/arguments to make sure it all still works
14:46 <ribasushi> s/any of the classes/Schema, Storage, ResultSet, Result/
14:46 <nine> It's a shame, many people have no idea, how powerful DBIC really is.
14:47 <ribasushi> I know, sadly I fail to explain this "to the masses"
14:49 <ribasushi> e.g. https://github.com/dbsrgits/dbix-class/commit/8b60b921#diff-7187d12eee0941e03bffaa08d3856061
14:49 <ribasushi> this is the only *actual* change that was needed to make all tests run via the replicated extension (two connections one reader one writer) on a specific ENVVAR
14:49 <ribasushi> the rest of the commit is fixups for some of the tests where breaking this assumption is fatal
14:50 <ribasushi> everything else (the other ~250 tests) stayed unchanged
14:51 <nine> amazing
14:52 <ribasushi> anyway - this seems to me as a prime hookup point for more ip5 testing

5 hours lost because of URI not digesting a mix of UTF-8 encoded and Unicode strings provided by Geo::Coder::OSM


Need a method after use v6-inline; to work?

~ 60 % slow down running the test suite. 1197 vs. 746 wallclock seconds
1.113 * 194 seconds startup penalty => 24 % runtime slowdown

Examples: Spreadsheet::ParseExcel and Excel::Writer::XLSX


I remember the birth of this millenium.
I am quite surprised though that I do.
Because back then, I did everything I could, so I wouldn't remember.
In other words: I was drunk.
I was shit faced.
I was so drunk, I danced half naked on our village's market place.
Fortunately for me, where I'm from, that is somewhat acceptable behavior for a yourth my age back then.
It was 15 years ago after all.

In the same year, when I was trying to get through puberty without too many scars, Perl 6 was announced.
It took me some fiver years though, till I first heard about it.
In 2005, safely arrived in adulthood and a bit calmer, I wasn't that excited about Perl 6.
I though, ok, this will probably gonna be a nice update to the Perl 5 I know and love.
They would probably remove some of the cruft and add some niceties.
Bt all in all, I was quite satisfied with the Perl I knew.

By about 2007, I was hooked.
I had seen some presentations and Perl 6 shaped up to be both easier to get into but also insanely powerful.
I also realized, that this really was a new language.

I've seen Damian Conway's keynote where he told us that half his CPAN modules are just trying to bring features to Perl 5 that Perl 6 alreadyh as.
Guess what? Shocking as this may come, but most of us, are not Damian Conway!
And looking at at July's new CPAN modules, we find Marketplace::Ebay, Protocol::Matrix, App::Timestamper, DBD::Crate or ReCAPTCHAv2.
That's loads and loads of special purpose modules that have nothing to do at all with improving the language but just happen to be written in it.
