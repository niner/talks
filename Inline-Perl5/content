1. Inline::Perl5
	My name is Stefan Seifert.
	I've been a Perl developer for 15 years.
	About half of this time I've been following Perl 6 development.
	I went to YAPCs and workshops and whenever jnthn or masak were attending, I've seen great talks about cool features in Perl 6.
	I've been Wanting to try it for years, but always ran into some missing library like DBI, Catalyst, Mail::IMAPClient, the Petal XML template module.
	So I sat outside, watching from the fence and going back to work.

	At this year's YAPC I decided to finally do something about it.
	What started out as a very fancy Hello World hack, quickly evolved into a module that gave this talk its title: Inline::Perl5.
	About a month after the initial commit, I was at a point where I could port a Catalyst based web application to Perl 6.

	Today I'm gonna show you how to do exactly that.
	Catalyst is one of the oldest and most powerful MVC frameworks for Perl.
	The application is CiderWebmail. A very nice webmail application Mathias and I wrote a couple years ago.
	So where do we start?
	Catalyst creates a start script for you to run your application on a Perl webserver: script/ciderwebmail_server.pl
	Let's have a look at it.

2. <00-ciderwebmail_server.pl
	Fairly straight forward perl script.
	Basically just loading a module and calling a package method that does the real work.
	This is where we start porting to Perl 6.



3. <01-ciderwebmail_server.pl
	If you look at the first line, I just replaced perl by perl6.
	Setting the environment variable just got translated to different syntax.
	Then we load Inline::Perl5 which gave this talk its title.
	We create a new $p5 object and call its run method giving it a single string as argument.

3b. Live demo

4. Thank you!
	We can now run CiderWebmail in Perl 6!
	I could stop here and simply call the job done.

        If you've seen my lightning talk at YAPC::EU, what I've showed so far was probably pretty boring, since this has worked a couple of hours after I've started writing Inline::Perl5.
        So what's new?
        There are a couple of improvements we can make on our startup script.

5. <02-ciderwebmail_server.pl
        Inline::Perl5 has a 'use' method that does exactly the same as use in Perl5.
        That's basically just sugar, so you don't have to use run just to load a module.
        Then there's invoke which lets you call methods on packages or objects.
        You just give it your package or object, the name of the method and additional arguments.

6. 03-petal.pl
        Of course the method may have one or more return values and those get returned by invoke just like you'd expect.
        This quick example uses Perl 5's Petal templating module.
        We just create a new template object.
        Then we feed it some data in the form of a hash containing strings and lists.
        The function returns a string which we then print.
    
7. Inheritance by delegation
        The next example brings us back to Catalyst.
        What I've shown so far allows you to use a large number of CPAN modules.
        However, some of them expect you to subclass.
        In Catalyst you write model, view and controller classes that are subclasses of classes Catalyst provides.
        Controllers for example are derived from Catalyst::Controller.

8. <04-catalyst-controller.pl
        These inheritance based APIs usually expect you to implement some methods.
        For Catalyst controllers those methods are the actions that handle web requests.

	So how do we subclass a Perl 5 class in Perl 6?
        Inline::Perl5 provides a Perl5Parent role.
        By consuming this role in your class, you are telling Inline::Perl5 that your class should act like a subclass of the given Perl 5 class.
        That means whenever a method on an object of this class is called, it is dispatched to your Perl 6 class.
        If the Perl 6 class does not provide the method, the call is dispatched to the underlying Perl 5 object.
        This works regardless of the caller being Perl 5 or Perl 6 code.
        I call this inheritance by delegation.

        This mechanism would allow you for example to use HTML::Parser in Perl 6.
        But it's not enough for Catalyst.
	Catalyst components are Moose classes.
	Catalyst uses Class::MOP's introspection capabilities to find the actions a controller supports and how they should be mapped to URLs.
	The latter is done by querying the attributes of the action methods.

	Perl 6 does not have subroutine attributes and Class::MOP does only deal with classes it created itself.
	To be able to use a Perl 6 object as Catalyst controller, I wrote a replacement for Class::MOP that I could use as meta class for my controllers.

8. <05-MOP.pm
	Luckily Perl 6 already supports meta objects and introspection so this ended up being surprisingly little code.
	I really only have to map the Class::MOP API that Catalyst uses to the Perl 6 introspection API.
	This is how it is used:

9. <06-Component.pm

	So how do we manage information about how to map URLs to actions?

	While Perl 6 does not have subroutine attributes it has traits.
	Traits allow you to easily attach meta data to all kinds of objects including methods.

10. <09-Perl5Attributes.pm6
	These traits just apply a role to the method and stores the meta data in a new attribute that can be queried by Perl6::MOP.

	This is pretty much everything you need to write Catalyst components in Perl 6.
	However there's one annoying thing left.
	Catalyst automatically loads modules from the Model, View and Controller namespaces.
	Obviously these are Perl 5 modules which would then have to load the corresponding Perl 6 modules containing the real code.
	Luckily there's a solution for that, too.

11. <11-Root.pm
	Inline::Perl5 automatically creates a package called v6-inline.
	By just saying "use v6-inline;" you can hand over the rest of the file to Perl 6 for processing.
	This allows you to have the Perl 6 code in the same file als the Perl 5 shim.

12. Live demo

13. What does not work? <13-limits
	I've shown you a lot of things that do work with Inline::Perl5.
	An obvious question is: what does not work?
	Without making any claim of completeness, there are some obvious candidates:
		* Any kind of source filter would be highly surprised by finding Perl 6 code.
		* Low level modules in the Devel:: namespace.
		* Probably most modules in the Perl6 namespace which are by their very nature obsolete.
		* As you've seen, interaction with Class::MOP does not work out of the box, but can at least in some cases be implemented easily.

14. Alternatives (v5) <14-v5.pl
	If you don't actually need XS support, there is an alternative to Inline::Perl5.
	It's called v5 and in short is an implementation of Perl 5, written in Perl 6.
	It parses Perl 5 code using a Perl 6 grammar and compiles it to an AST just like it's done with Perl 6 code.
	This means that it can benefit from JIT compilation and threading support thereby in theory allowing it to surpass Perl 5's performance.
	So if you can get away with it, v5 should be your first place to go.
	However, like I said, it does not support XS and never will.
	It also does not cope too well with anything based on Devel::Declare or influencing the parsing in any way.

	Inline::Python available as well!

15. Future work
	Inline::Perl5 does pretty much everything I need to be able to get into Perl 6 for real.
	Future work will thus be driven mostly by user feedback, i.e. you.
	However, some ideas are already floating around:
	* Importing symbols from Perl 5 modules into Perl 6 code sounds fairly straight forward to implement.
	* Synopsis 1 calls for Perl 6 to assume a program to be written in Perl 5 unless there's some clear indication that it's Perl 6.
	  This is not yet implemented, but I'd like Perl 6 to automatically fall back to using Inline::Perl5.
	  Even better would be to fall back to v5 and use Inline::Perl5 transparently for supporting XS modules.
	* Of course, like with Perl 6 in general, performance is high up on the TODO list.

16. Summary <16-summary
